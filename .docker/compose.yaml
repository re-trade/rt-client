services:
  rt-client-customer:
    container_name: rt-client-customer
    image: ${REGISTRY}/rt-client-customer:${TAG:-latest}
    restart: always
    networks:
      - retrade-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.customer-ui.rule=Host(`dev.${DOMAIN:-retrade.local}`) && PathPrefix(`/`)"
      - "traefik.http.routers.customer-ui.entrypoints=web"
      - "traefik.docker.network=retrade-network"
      - "traefik.constraint-label=retrade-service"
      - "traefik.http.services.customer-ui.loadbalancer.server.port=3000"
    profiles:
      - customer
      - prod
      - frontend

  rt-client-admin:
    container_name: rt-client-admin
    image: ${REGISTRY}/rt-client-admin:${TAG:-latest}
    restart: always
    networks:
      - retrade-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin-ui.rule=Host(`admin-dev.${DOMAIN:-retrade.local}`)"
      - "traefik.http.routers.admin-ui.entrypoints=web"
      - "traefik.docker.network=retrade-network"
      - "traefik.constraint-label=retrade-service"
      - "traefik.http.services.admin-ui.loadbalancer.server.port=3000"
    profiles:
      - admin
      - prod
      - frontend

  rt-client-seller:
    container_name: rt-client-seller
    image: ${REGISTRY}/rt-client-seller:${TAG:-latest}
    restart: always
    networks:
      - retrade-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.seller-ui.rule=Host(`seller-dev.${DOMAIN:-retrade.local}`)"
      - "traefik.http.routers.seller-ui.entrypoints=web"
      - "traefik.docker.network=retrade-network"
      - "traefik.constraint-label=retrade-service"
      - "traefik.http.services.seller-ui.loadbalancer.server.port=3000"
    profiles:
      - seller
      - prod
      - frontend

networks:
  retrade-network:
    name: retrade-network
    external: true